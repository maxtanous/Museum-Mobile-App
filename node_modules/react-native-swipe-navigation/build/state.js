Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var config={};var stack=[];var BACK='@BACK';function setConfig(_config){config=setupConfig(_config);stack.push(Object.keys(config)[0]);}function setupConfig(config){config=_extends({},config);var keys=Object.keys(config);keys.forEach(function(key){if(!config[key]){throw new Error('config '+key+' should be an object');}var _config$key=config[key],screen=_config$key.screen,right=_config$key.right,left=_config$key.left,bottom=_config$key.bottom,top=_config$key.top,color=_config$key.color,type=_config$key.type;if(!type)type='push';if(type!=='over'&&type!=='push'&&type!=='place'){throw new Error('the type property accept one of "over" "push" "place"');}if(color&&!/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)){throw new Error('the color accepts just hex type');}if(typeof screen!=='function'){throw new Error('screen '+key+' should be a function');}if(screen===BACK){throw new Error('screen should not be '+BACK+' in '+key);}if(right&&right!==BACK){if(!config[right]){throw new Error('the right property "'+right+'" in the screen '+key+' should be point to an existence screen');}config[right].left=BACK;}if(left&&left!==BACK){if(!config[left]){throw new Error('the left property "'+left+'" in the screen '+key+' should be point to an existence screen');}config[left].right=BACK;}if(bottom&&bottom!==BACK){if(!config[bottom]){throw new Error('the bottom property "'+bottom+'" in the screen '+key+' should be point to an existence screen');}config[bottom].top=BACK;}if(top&&top!==BACK){if(!config[top]){throw new Error('the top property "'+top+'" in the screen '+key+' should be point to an existence screen');}config[top].bottom=BACK;}});return config;}function log(){console.log('------------- state -----------');console.log('config: ',config);console.log('stack: ',stack);console.log('-------------------------------');}function getAPI(){return{getMain:getMain,getLeft:getLeft,getRight:getRight,getTop:getTop,getBottom:getBottom,getBack:getBack,push:push,pop:pop};}function getMain(){var screenName=stack[stack.length-1];var _config$screenName=config[screenName],screen=_config$screenName.screen,color=_config$screenName.color,type=_config$screenName.type;return{screenName:screenName,screen:screen,color:color,type:type};}function getLeft(){var screenName=stack[stack.length-1];var left=config[screenName].left;if(left===BACK){return getBack();}if(left){var _config$left=config[left],screen=_config$left.screen,color=_config$left.color,type=_config$left.type;return{screenName:left,screen:screen,color:color,type:type};}return null;}function getRight(){var screenName=stack[stack.length-1];var right=config[screenName].right;if(right===BACK){return getBack();}if(right){var _config$right=config[right],screen=_config$right.screen,color=_config$right.color,type=_config$right.type;return{screenName:right,screen:screen,color:color,type:type};}return null;}function getTop(){var screenName=stack[stack.length-1];var top=config[screenName].top;if(top===BACK){return getBack();}if(top){var _config$top=config[top],screen=_config$top.screen,color=_config$top.color,type=_config$top.type;return{screenName:top,screen:screen,color:color,type:type};}return null;}function getBottom(){var screenName=stack[stack.length-1];var bottom=config[screenName].bottom;if(bottom===BACK){return getBack();}if(bottom){var _config$bottom=config[bottom],screen=_config$bottom.screen,color=_config$bottom.color,type=_config$bottom.type;return{screenName:bottom,screen:screen,color:color,type:type};}return null;}function getBack(){if(stack.length<2)return null;var screenName=stack[stack.length-2];var _config$screenName2=config[screenName],screen=_config$screenName2.screen,color=_config$screenName2.color,type=_config$screenName2.type;return{isBack:true,screenName:screenName,screen:screen,color:color,type:type};}function push(screenName){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$leaveFrom=_ref.leaveFrom,leaveFrom=_ref$leaveFrom===undefined?'right':_ref$leaveFrom,_ref$type=_ref.type,type=_ref$type===undefined?'over':_ref$type,color=_ref.color;if(typeof screenName==='string'){if(!config[screenName]){throw new Error(screenName+' doesn\'t exist');}}else if(typeof screenName==='function'){var _config$screenName3;if(leaveFrom==='left'){leaveFrom='right';}else if(leaveFrom==='right'){leaveFrom='left';}else if(leaveFrom==='top'){leaveFrom='bottom';}else{leaveFrom='top';}var screen=screenName;screenName='screen-'+Date.now()+'-'+Math.random();config[screenName]=(_config$screenName3={screen:screen},_defineProperty(_config$screenName3,leaveFrom,BACK),_defineProperty(_config$screenName3,'type',type),_defineProperty(_config$screenName3,'color',color),_config$screenName3);}else{throw new Error('screen should be a string or a function');}stack.push(screenName);}function pop(){stack.pop();}exports.default={setConfig:setConfig,log:log,getAPI:getAPI};